# Sample data insertion for each category
sample_data = {
      'Acts': [
            ('Mining Act',
             'The Mining Act governs mining operations in India. It covers various aspects of mining, including '
             'exploration, licensing, and environmental regulations. The Act is designed to ensure the sustainable '
             'and responsible extraction of minerals while safeguarding the environment and the rights of local '
             'communities.'),
            ('Mineral Conservation and Development Rules',
             'These rules outline procedures for mineral conservation. They emphasize the efficient use of mineral '
             'resources, the prevention of illegal mining, and the promotion of scientific mining practices. The '
             'rules set forth guidelines for mining leaseholders to follow in managing mineral reserves and ensuring '
             'their sustainable development.'),
      ],
      'Rules': [
            ('Mining Safety Rules',
             'Safety rules for mining operations are crucial to protect the health and well-being of mining '
             'personnel. These rules establish safety standards and protocols for various aspects of mining, '
             'including underground and surface operations, explosives handling, and ventilation. Compliance with '
             'these rules is essential to minimize accidents and ensure a safe working environment for miners.'),
            ('Environmental Protection Rules',
             'Rules for environmental protection in mining are aimed at minimizing the ecological impact of mining '
             'activities. They prescribe measures for environmental impact assessments, pollution control, '
             'and reclamation of mined areas. Adhering to these rules is vital to mitigate the environmental '
             'footprint of mining operations and fulfill legal obligations.'),
      ],
      'Regulations': [
            ('Mining Regulations',
             'Regulations related to mining activities provide detailed guidance on compliance with the Mining Act '
             'and Rules. These regulations cover a wide range of topics, including lease applications, royalties, '
             'and safety inspections. They are essential for ensuring that mining companies and operators meet legal '
             'and operational requirements in their mining activities.'),
            ('Export and Import Regulations',
             'Rules for exporting and importing minerals govern the international trade of mined products. These '
             'regulations specify documentation and licensing requirements for the export and import of minerals. '
             'Compliance with these rules is necessary to facilitate international trade while preventing illegal '
             'mineral exports and imports.'),
      ],
      'Guidelines': [
            ('Mining Guidelines',
             'Guidelines for sustainable mining practices offer recommendations for responsible mining operations. '
             'They advocate for environmentally conscious practices, community engagement, and ethical conduct. '
             'Following these guidelines is not only a legal requirement but also contributes to the industry\'s '
             'social and environmental responsibility.'),
            ('Safety Guidelines',
             'Safety guidelines for mining personnel provide practical advice for ensuring the well-being of miners. '
             'They cover topics such as personal protective equipment (PPE), emergency response, and first aid '
             'procedures. Implementing these guidelines is essential to prevent accidents and safeguard the health of '
             'workers.'),
      ],
      'Methodology': [
            ('Mining Methodology',
             'The methodology for extracting minerals from mines outlines the step-by-step process of mining '
             'operations. It encompasses exploration, drilling, blasting, ore extraction, and processing. A '
             'well-defined methodology is essential to optimize resource recovery while minimizing environmental '
             'impacts and ensuring worker safety.'),
            ('Environmental Assessment Methodology',
             'Methodology for environmental impact assessment in mining is crucial for evaluating the potential '
             'ecological consequences of mining projects. It involves comprehensive studies to assess air and water '
             'quality, wildlife habitats, and socio-economic factors. Following this methodology helps mining '
             'companies make informed decisions and mitigate environmental risks.'),
      ],
      'Corrigenda': [
            ('Mining Corrigendum',
             'This corrigendum corrects errors in previous mining regulations. It may include updates to legislative '
             'texts, clarifications, or corrections of typographical errors. Staying informed about corrigenda is '
             'essential for legal compliance and ensuring that mining operations adhere to the latest regulatory '
             'requirements.'),
            ('Safety Corrigendum',
             'Corrigendum related to safety regulations in mining addresses safety-related updates or changes in '
             'safety guidelines. Staying up to date with safety corrigenda is critical for maintaining a safe working '
             'environment and complying with the latest safety standards.'),
      ]
}


import mysql.connector
import spacy
from nltk.corpus import stopwords
import requests
import webbrowser

# Load the spaCy model for natural language processing
nlp = spacy.load("en_core_web_sm")

def connect_to_database(host, user, password, database):
    # Establish a connection to the MySQL database
    conn = mysql.connector.connect(
        host=host,
        user=user,
        password=password,
        database=database,
        charset='utf8mb4',
        collation='utf8mb4_general_ci'
    )
    cursor = conn.cursor()
    return conn, cursor

def extract_keywords(query):
    # Extract keywords from the user query after lemmatization and removing stopwords
    doc = nlp(query)
    stop_words = set(stopwords.words('english'))
    keywords = [token.lemma_.lower() for token in doc if token.is_alpha and token.lemma_.lower() not in stop_words]
    return keywords

def search_data(user_query, cursor, max_results=5, target_category=None):
    # Search for relevant information in the MySQL database based on extracted entities from the user query
    keywords = extract_keywords(user_query)
    matched_results = []

    # Build a dynamic SQL query with multiple OR conditions for each keyword
    query_str = f"SELECT category, title, content FROM mining_data WHERE {' OR '.join(['content COLLATE utf8mb4_general_ci LIKE %s'] * len(keywords))}"
    params = ['%' + keyword + '%' for keyword in keywords]

    if target_category:
        query_str += " AND category = %s"
        params.append(target_category)

    cursor.execute(query_str, params)
    results = cursor.fetchall()

    for category, title, content in results:
        matched_results.append((category, title, content))

    # Limit the number of results to be displayed
    return matched_results[:max_results]

def display_results(results):
    # Displays the matched results in a formatted manner
    print("-" * 60)
    for result in results:
        category, title, content = result
        print(f"Category: {category.capitalize()}")
        print(f"Title: {title}")
        print(f"Content: {content}")
        print("-" * 60)

def is_internet_available():
    try:
        # Try to make a simple HTTP request to a reliable website
        response = requests.get("http://www.google.com", timeout=5)
        response.raise_for_status()
        return True
    except requests.RequestException:
        return False

def main():
    # Database configuration
    db_host = "localhost"
    db_user = "root"
    db_password = "pandasql"
    db_database = "SIH_Mining_Chatbot"

    # Establish a connection to the MySQL database
    conn, cursor = connect_to_database(db_host, db_user, db_password, db_database)

    print("Welcome to the Mining Industry Chatbot. You can ask questions about mining Acts, Rules, Regulations, Guidelines, Methodology, or Corrigenda. Type 'exit' to quit.")

    while True:
        user_query = input("You: ").strip().lower()

        if user_query.lower() == 'exit':
            print("Chatbot: Goodbye! Have a great day!")
            break

        if user_query in ['hi', 'hello', 'hey']:
            print("Chatbot: Hello! How can I assist you today?")
            continue
        elif user_query in ['bye', 'goodbye', 'exit']:
            print("Chatbot: Goodbye! If you have more questions in the future, feel free to return.")
            break

        target_category = None
        if 'acts' in user_query:
            target_category = 'Acts'
        elif 'rules' in user_query:
            target_category = 'Rules'
        elif 'regulations' in user_query:
            target_category = 'Regulations'
        elif 'guidelines' in user_query:
            target_category = 'Guidelines'
        elif 'methodology' in user_query:
            target_category = 'Methodology'
        elif 'corrigenda' in user_query:
            target_category = 'Corrigenda'

        try:
            matched_results = search_data(user_query, cursor, target_category=target_category)

            if matched_results:
                display_results(matched_results)
            else:
                raise Exception("No relevant information found")  # Raise an exception to skip the "couldn't find any relevant information" message

        except Exception as ex:
            try:
                if is_internet_available():
                    print("Chatbot: It seems like I don't understand what you said. Let me look that up on the internet.")
                    search_query = user_query.replace(" ", "+")
                    search_url = f"https://www.google.com/search?q={search_query}"
                    print(f"Here are some results for you: {search_url}")
                    webbrowser.open(search_url)
                else:
                    print("Chatbot: Connect to the internet to get better results.")
            except Exception as e:
                print(f"Chatbot: An error occurred: {e}")

if __name__ == "__main__":
    main()
